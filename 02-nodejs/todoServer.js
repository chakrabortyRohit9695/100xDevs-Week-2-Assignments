/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {v4 : uuidv4} = require('uuid');
port = 3002
const app = express();

app.use(bodyParser.json());

// function generateUniqueId() {
//   return uuidv4();
// }

var counter = 1;

function generateId() {
  var id = counter.toString();
  counter++;
  return id;
}

var todoMap = {};

//------------- GET /todos ----------------

function fetchAllTodos(req, res) {
  res.send(Object.values(todoMap));
}


//------------- GET /todos/:id ----------------

function fetchTodoById(req, res) {
  var id = req.params.id;
  if(todoMap.hasOwnProperty(id)) {
    var respObj = todoMap[id];
    respObj["id"] = id;
    console.log(respObj);
    res.status(200).send(respObj);
    
  } else {
    console.log(id + " not present...");
    res.status(404).send("Not Found");
  }
}



//------------- PUT /todos/:id ----------------

function updateTodoById(req, res) {
  var id = req.params.id;
  var body = req.body;
  if(todoMap.hasOwnProperty(id)) {
    todoMap[id] = body;
    res.status(200).send("Updated!");
  } else {
    res.status(404).send("Not Found");
  }
}

//------------- DELETE /todos/:id ----------------

function deleteTodoById(req, res) {
  var id = req.params.id;
  if(todoMap.hasOwnProperty(id)) {
    delete todoMap[id];
    console.log(todoMap);
    res.status(200).send("Deleted!");
  } else {
    res.status(404).send("Not Found");
  }
}


//------------- POST /todos ----------------

function createTodo(req, res) {
  var id = generateId();
  todoMap[id] = req.body;
  console.log(todoMap);
  res.status(201).send({ id })
}

app.post('/todos', createTodo)
app.get('/todos', fetchAllTodos)
app.get('/todos/:id', fetchTodoById)
app.put('/todos/:id', updateTodoById)
app.delete('/todos/:id', deleteTodoById)
app.all('*', (req, res)=> {
  res.status(404).send("Route not found");
})

// app.listen(port, () => console.log(`Todo server Listening on ${port}`))

module.exports = app;
